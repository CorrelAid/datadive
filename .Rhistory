AB1<-edvreg(prldta,rl_adiff_yes~covrate+refusal+num+imp+week1+imp*num+
imp*week1+socdes+togap+inonrr+psw_var,
"rl_svar_yes",proportional=FALSE,extractdf=FALSE, idchar="id")
summary(AB1)
library(foreign)
test <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\tmg_table.csv")
View(test)
ncol(test)
vdic <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\vdict.csv")
View(vdic)
vdic <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\vdict.csv", header = F)
View(vdic)
rm test
rm(test)
rm(vdic)
save.image("~/.RData")
vdic <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\vdict.csv", header = F)
test <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\tmg_table.csv")
View(test)
test <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\tmg_table.csv")
View(test)
test <- read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\tmg_table.csv")
View(test)
library(foreign)
read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\vdict.csv")
test<-read.csv("C:\\Users\\Friedrike\\Desktop\\IPSS\\termproj\\vdict.csv")
View(test)
install.packages("Shiny")
install.packages("shiny")
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
?round
shiny::runApp('C:/Users/Friedrike/Desktop/Uni/Shiny/app - bootstrap')
library(shinyapps)
install.packages("installr")
library(installr)
install.Rtools(choose_version = FALSE, check = TRUE, use_GUI = TRUE,
page_with_download_url = "http://cran.r-project.org/bin/windows/Rtools/, keep_install_file=TRUE")
install.packages("devtools")
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages("shinyapps")
install.packages("RCurl")
install.packages("RCurl")
install.packages("digest")
library(devtools)
install.packages("RTools")
(450*6+363,12*3)/12
(450*6+363.12*3)/12
load("C:/Users/Friedrike/Desktop/Uni/Projects/Current/Datenrecherche/documentation/.RData")
install.packages("descr")
library(descr)
freq(df$cntry_code)
?freq
petitions <- read.csv("data/liste_in_zeichnung.csv", header = T, stringsAsFactors = F)
setwd("C:/Users/Friedrike/Documents/GitHub/datadive")
all_sig <- read.csv("data/statistik_und_karten/5_ganzer_zeitraum.csv",
header = T, stringsAsFactors = F)
summary(all_sig$id)
petitions <- read.csv("data/4_liste_in_zeichnung.csv",
header = T, stringsAsFactors = F)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
library(dplyr)
petitions <- petitions %>%
select(id, target_support, category)
trl <- left_join(all_sig, petitions)
View(petitions)
petitions <- read.csv("data/1_liste_in_zeichnung.csv", header = T, stringsAsFactors = F)
View(petitions)
# Loading the R packages neccessary to execute the tasks ahead.
packages <- c("stringr", "XML", "maptools", "RCurl", "ggplot2", "sp", "spdep",
"rgdal", "reshape", "stringr", "dplyr")
for (p in packages) {
if (p %in% installed.packages()[,1]) require(p, character.only=T)
else {
install.packages(p)
require(p, character.only=T)
}
}
# ------------------------------------------------------------------------------
# Link zur Liste der Petition setzen und Anzahl der Seiten auslesen
# ------------------------------------------------------------------------------
URL <- 'https://www.openpetition.de/liste/in_zeichnung' # URL zur ersten Seite
file <- 'data/listen/liste_in_zeichnung_1.html' # Pfad wo HTML-Seite gespeichert
# wird
download.file(URL, file)  # Datei wird heruntergeladen
parsed_doc <- htmlParse(file)  # Einlesen des HTML Codes
# Diesr Code liest den Text des Links zur letzten Seiten ein
# So wird identifiziert wieviele Seiten die Liste der Petitionen umfasst
num_pages <-
xpathSApply(parsed_doc, "//p[@class = 'pager']/a[last()]", fun = xmlValue)
num_pages <- as.integer(num_pages)
# ------------------------------------------------------------------------------
# Alle Seiten herunterladen
# ------------------------------------------------------------------------------
# Dieser ruft einzeln https://www.openpetition.de/liste/in_zeichnung?seite=*p*
# auf und speichert die vom Server generierte HTML-Seite
# *p* ist die Seitenzahl
# Die Schleife läuft bis die max. Seitenzahl (aus dem vorherigen Schritt)
# erreicht ist
for(p in 2:num_pages){
url <- paste0(URL, '?seite=', as.character(p))
content <- getURL(url)
dest_path <- paste0('data/listen/liste_in_zeichnung_', as.character(p), '.html')
write(content, dest_path)
}
# ------------------------------------------------------------------------------
# Liste aus Seite auslesen
# ------------------------------------------------------------------------------
# Leerer data.frame der die Liste der Petitionen von allen Seiten enthalten wird
petitions <- data.frame()
# Die Loop durchläuft alle HTML-Seiten der Liste und liest die Petitionen aus
# und fügt diese zu einer Liste zusammen
for(p in 1:num_pages) {
# Datei einlesen -------------------------------------------------------------
file <- paste0('data/listen/liste_in_zeichnung_', as.character(p), '.html')
parsed_doc <- htmlParse(file)
# Datei auslesen -------------------------------------------------------------
# Liest die Titel der Petionen aus der Liste aus
name <- xpathSApply(parsed_doc, "//ul[@class = 'petitionen-liste']//h2/a",
fun = xmlValue)
# name säubern
name <- gsub('\n|\t|\t ', '', name)
# Liest die Links zu den Petitionen aus der Liste aus
url <- xpathSApply(parsed_doc, "//ul[@class = 'petitionen-liste']//h2/a",
xmlGetAttr, 'href')
tmp <- data.frame(name, url)
# Neue Seiten an Liste der Petitionen anhängen
petitions <- rbind(petitions, tmp)
}
#manche URLs enthalten schon absoluten Pfad, andere nur relativen Pfad
petitions$url <- as.character(petitions$url)
petitions1 <- petitions %>%
filter(str_detect(url, "http://")) %>%
mutate(url = str_replace_all(url, "http", "https"))
petitions2 <- petitions %>%
filter(str_detect(url, "http://") == F) %>%
mutate(url =  paste0('https://www.openpetition.de', url))
petitions <- rbind(petitions1, petitions2)
write.csv(petitions, 'data/1_liste_in_zeichnung.csv', row.names = F)
petitions <- read.csv("data/1_liste_in_zeichnung.csv", header = T, stringsAsFactors = F)
View(petitions)
duplicated(petitions$name)
sum(unique(petitions$name))
sum(!duplicate(petitions$name))
sum(!duplicated(petitions$name))
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
View(petitions)
sum(!duplicated(petitions$title))
setwd("C:/Users/Friedrike/Documents/GitHub/datadive")
all_sig <- read.csv("data/statistik_und_karten/5_ganzer_zeitraum.csv",
header = T, stringsAsFactors = F)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
petitions <- petitions %>%
select(id, target_support, category)
petitions <- left_join(all_sig, petitions)
petitions$perc <- petitions$sig_total / petitions$target_support
View(all_sig)
petitions$perc <- petitions$sig_total / petitions$target_support * 100
petitions$date <- as.Date(petitions$date)
?first_n
petitions <- petitions %>%
group_by(id) %>%
mutate(first_day = first(date))
View(petitions)
petitions <- petitions %>%
group_by(id) %>%
mutate(first_day = as.Date(first(date)))
petitions$day_diff <- petitions$date - petitions$first_day
View(petitions)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
View(petitions)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F, colClasses = character)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F, colClasses = "character")
View(petitions)
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
View(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
petitions$id <- as.integer(petitions$id)
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
#status
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}).+", "\\1"))
View(petitions)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1"))
View(petitions)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}).+", "\\1"))
View(petitions)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1"))
View(petitions)
petitions$target_support <- str_replace_all(target_support, "für Sammelziel", "")
petitions$target_support <- str_replace_all(petitions$target_support, "für Sammelziel", "")
View(all_sig)
View(petitions)
petitions$target_support <- str_replace_all(petitions$target_support, "für Quorum.+", "")
View(petitions)
petitions$target_support <- str_replace_all(petitions$target_support, "\\.", "")
View(petitions)
#perc_reached
petitions$perc_reached <- str_replace_all(petitions$perc_reached, "% erreicht von", "")
petitions$perc_reached <- str_replace_all(petitions$perc_reached, "% achieved of", "")
petitions$perc_reached <- as.integer(petitions$perc_reached)
#supporters_total
petitions <- petitions %>%
mutate(supporters_total = str_replace_all(supporters_total, "\\.", "")) %>%
mutate(supporters_total = as.integer(supporters_total))
#supporters_for_quorum
petitions <- petitions %>%
mutate(supporters_for_quorum = str_replace_all(supporters_for_quorum, "\\.", "")) %>%
mutate(supporters_for_quorum = as.integer(supporters_for_quorum))
#petition_text
petitions <- petitions %>%
mutate(petition_text = str_replace_all(petition_text, "\\n", "")) %>%
mutate(petition_text = str_replace_all(petition_text, "\\t", ""))
#stat_url -> nothing to do here
petitions$stat_url <- as.character(petitions$stat_url)
#write csv
write.csv(petitions, "data/4_liste_in_zeichnung_clean.csv", row.names = F)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F, colClasses = "character")
View(all_sig)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F, colClasses = "character")
View(petitions)
petitions <- petitions %>%
select(id, target_support, category)
petitions <- left_join(all_sig, petitions)
petitions$perc <- petitions$sig_total / petitions$target_support * 100
petitions$date <- as.Date(petitions$date)
petitions <- petitions %>%
group_by(id) %>%
mutate(first_day = as.Date(first(date)))
petitions$day_diff <- petitions$date - petitions$first_day
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
View(petitions)
petitions <- petitions %>%
select(id, target_support, category)
petitions <- left_join(all_sig, petitions)
petitions$perc <- petitions$sig_total / petitions$target_support * 100
petitions$date <- as.Date(petitions$date)
petitions <- petitions %>%
group_by(id) %>%
mutate(first_day = as.Date(first(date)))
petitions$day_diff <- petitions$date - petitions$first_day
View(petitions)
library(ggplot2)
plot <- ggplot(petitions, aes(x=day_diff, y=perc, color = id))+
geom_point()
plot
petitions$day_diff <- as.numeric(petitions$date - petitions$first_day)
plot <- ggplot(petitions, aes(x=day_diff, y=perc, color = id))+
geom_point()
plot
plot <- ggplot(petitions, aes(x=day_diff, y=perc, group = id))+
geom_line()
plot
petitions <- petitions %>%
filter(perc <= 120)
plot <- ggplot(petitions, aes(x=day_diff, y=perc, color = id))+
geom_line()
plot
plot <- ggplot(petitions, aes(x=day_diff, y=perc, group = id))+
geom_line()
plot <- ggplot(petitions, aes(x=day_diff, y=perc, group = id))+
geom_point()
plot
plot <- ggplot(petitions, aes(x=day_diff, y=perc, color = id))+
geom_point()
plot
plot <- ggplot(petitions, aes(x=day_diff, y=perc, color = id))+
geom_point()+
geom_smooth()
petitions <- petitions %>%
group_by(day_diff) %>%
summarise(mean_perc_reached = mean(perc))
View(petitions)
setwd("C:/Users/Friedrike/Documents/GitHub/datadive")
all_sig <- read.csv("data/statistik_und_karten/5_ganzer_zeitraum.csv",
header = T, stringsAsFactors = F)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv",
header = T, stringsAsFactors = F)
petitions <- petitions %>%
select(id, target_support, category)
petitions <- left_join(all_sig, petitions)
petitions$perc <- petitions$sig_total / petitions$target_support * 100
petitions$date <- as.Date(petitions$date)
petitions <- petitions %>%
group_by(id) %>%
mutate(first_day = as.Date(first(date)))
petitions$day_diff <- as.numeric(petitions$date - petitions$first_day)
pet_sum <- petitions %>%
group_by(day_diff) %>%
summarise(mean_perc_reached = mean(perc))
plot <- ggplot(petitions, aes(x=day_diff, y=per))+
geom_point()+
geom_smooth()
plot
plot <- ggplot(pet_sum, aes(x=day_diff, y=per))+
geom_point()+
geom_smooth()
plot
View(pet_sum)
plot <- ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached, group = id))+
geom_point()
plot
plot <- ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point()
plot
plot <- ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point()+
geom_smooth()
plot
plot <- ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_smooth()
ggsave("figures/dynamics.png")
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point()+
geom_smooth()+
axis_x_continuous("Tage seit erstem Eintrag", seq = c(0, 260, 30))+
axis_y_continuous("Mittlere erreichte Prozente")+
theme_bw()
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point()+
geom_smooth()+
scale_x_continuous("Tage seit erstem Eintrag", seq = c(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point()+
geom_smooth()+
scale_x_continuous("Tage seit erstem Eintrag", breaks = seq(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point(color = "#A0D565")+
geom_smooth(color = "#3863A2")+
scale_x_continuous("Tage seit erstem Eintrag", breaks = seq(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()+
labs(title = "")
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point(color = "#A0D565")+
geom_smooth(color = "#3863A2", size = 2)+
scale_x_continuous("Tage seit erstem Eintrag", breaks = seq(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()+
labs(title = "")
? geom_smooth
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point(color = "#A0D565")+
geom_smooth(color = "#3863A2", size = 2, se = F)+
scale_x_continuous("Tage seit erstem Eintrag", breaks = seq(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()+
labs(title = "Durchschnittlicher Zeitverlauf von in Zeichnung befindenden Petitionen")+
ggsave("figures/dynamics.png")
ggplot(pet_sum, aes(x=day_diff, y=mean_perc_reached))+
geom_point(color = "#A0D565")+
geom_smooth(color = "#3863A2", size = 2, se = F)+
scale_x_continuous("Tage seit erstem Eintrag", breaks = seq(0, 260, 30))+
scale_y_continuous("Mittlere erreichte Prozente")+
theme_bw()+
labs(title = "Durchschnittlicher Zeitverlauf von in Zeichnung befindenden Petitionen \n")+
ggsave("figures/dynamics.png")
