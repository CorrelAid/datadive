#who wrote petition
from <- html %>%
html_nodes(xpath = "//li[@class = 'petent']") %>%
html_text(trim = T)
#to whom it is directed
to <- html %>%
html_nodes(xpath = "//li[starts-with(./@class, 'empfaenger')]") %>%
html_text(trim = T)
#region
region <- html %>%
html_nodes(xpath = "//li[@class = 'region']/descendant::span") %>%
html_text(trim = T)
#category of petition
category <- html %>%
html_nodes(xpath = "//strong[contains(text(), 'Kategorie')]/parent::div") %>%
html_text(trim = T)
#total number of supporters
supporters_total <- html %>%
html_nodes(xpath = "//li[@class = 'unterstuetzer']/descendant::strong") %>%
html_text(trim = T) %>%
.[1]
#number of supporters relevant for Quorum
supporters_for_quorum <- html %>%
html_nodes(xpath = "//li[@class = 'unterstuetzer']/descendant::strong") %>%
html_text(trim = T) %>%
.[2]
#percentage of target support acquired
perc_reached <- html %>%
html_nodes(xpath = "//div[@class = 'ziel percentage']") %>%
html_text(trim =  T)
#target support
target_support <- html %>%
html_nodes(xpath = "//div[@class = 'ziel']") %>%
html_text(trim =  T)
#status of petition
status <- html %>%
html_nodes(xpath = "//strong[contains(text(), 'Status')]/parent::div") %>%
html_text(trim = T)
#days left
days_left <- html %>%
html_nodes(xpath = "//li[@class = 'restzeit']/descendant::span") %>%
html_text(trim = T)
#petition text
petition_text <- html %>%
html_nodes(xpath = "//div[@class = 'col2']/descendant::div[@class = 'text']") %>%
html_text(trim =  T)
#link to Statistik & Karten page
stat_url <- html %>%
html_nodes(xpath = "//a[contains(text(), 'Statistik')]") %>%
html_attr("href")
stat_url <- ifelse(is.na(stat_url), stat_url, paste0("https://www.openpetition.de", stat_url))
results <- cbind(id, title, from, to, region, category, status, target_support, perc_reached, supporters_total, supporters_for_quorum, petition_text, stat_url)
}
#apply function to htmls
data_individualpages <- ldply(htmls, scrape_page)
petitions <- merge(petitions, data_individualpages, by = c("id"))
rm(data_individualpages, htmls)
write.csv(petitions, "data/3_liste_in_zeichnung_scraped.csv", row.names = F)
rm(list = ls())
library(foreign)
library(plyr)
library(stringr)
library(dplyr)
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#remove name variable
petitions <- petitions %>%
select(-name)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(from = str_replace(from, "Kategorie: (.+)", "\\1"))
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1")) %>%
mutate(target_support = str_replace_all(target_support, "\\.", "")) %>%
mutate(target_support = as.integer(target_support))
#perc_reached
#supporters_total
petitions <- petitions %>%
mutate(supporters_total = str_replace_all(supporters_total, "\\.", "")) %>%
mutate(supporters_total = as.integer(supporters_total))
#supporters_for_quorum
petitions <- petitions %>%
mutate(supporters_for_quorum = str_replace_all(supporters_for_quorum, "\\.", "")) %>%
mutate(supporters_for_quorum = as.integer(supporters_for_quorum))
#petition_text
petitions <- petitions %>%
mutate(petition_text = str_replace_all(petition_text, "\\n", "")) %>%
mutate(petition_text = str_replace_all(petition_text, "\\t", ""))
#stat_url -> nothing to do here
petitions$stat_url <- as.character(petitions$stat_url)
#write csv
write.csv(petitions, "data/4_liste_in_zeichnung_clean.csv", row.names = F)
rm(petitions)
library(rvest)
library(jsonlite)
library(RCurl)
library(foreign)
library(plyr)
library(dplyr)
library(stringr)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv", stringsAsFactors = F)
#we only need a minimal subset for this script, only keep obs with stat_url
petitions_stats <- petitions %>%
select(id, stat_url) %>%
filter(!is.na(stat_url))
rm(petitions)
dir.create("data/html_files_stat")
for(i in 1:length(petitions_stats$stat_url)){
content <- getURL(petitions_stats$stat_url[i])
write(content, str_c("data/html_files_stat/", petitions_stats$id[i], ".html"))
Sys.sleep(0.2)
}
rm(i)
htmls <- list.files("data/html_files_stat", full.names = T)
temp <- data.frame(html = htmls)
temp$id <- unlist(str_extract_all(temp$html, "\\d{1,}"))
#merge to petitions_stats
petitions_stats <- merge(petitions_stats, temp, by = c("id"))
petitions_stats$html <- as.character(petitions_stats$html)
rm(htmls, temp)
rm(htmls, temp, content)
#function to get links to Json pages
get_jsonlinks <- function(html, id){
rawHTML <- paste(readLines(html), collapse=" ")
jsonurls <- unlist(str_extract_all(rawHTML, "var jsonUrl = '.+?'"))
jsonurls_cleaned <- str_replace_all(jsonurls, "var jsonUrl = '(.+?)'", "\\1")
#there are two Json pages of interest:
#1. the Json underlying the Full Graph ("Unterschriften im Petitionszeitraum") -> _gf suffix from now on
#2. the Json underlying the Last Days Graph ("Gesammelte Unterschriften pro Tag in den letzten zwei Wochen") -> _gld suffix
#extract both from jsonurls_cleaned and create data.frame with id variable
json_gf <- paste0("https://www.openpetition.de", jsonurls_cleaned[1])
json_gld <- paste0("https://www.openpetition.de", jsonurls_cleaned[2])
id <- id
cbind(id, json_gf, json_gld)
}
#apply function
temp <- mdply(select(petitions_stats, html, id), get_jsonlinks)
petitions_stats <- merge(petitions_stats, temp, by = c("id"))
rm(temp)
petitions_stats$json_gf <- as.character(petitions_stats$json_gf)
petitions_stats$json_gld <- as.character(petitions_stats$json_gld)
#4.1. For the Full Graph ("Unterschriften im Petitionszeitraum")
#function to extract json graph full
getjson_gf <- function(url, id){
#read Lines
raw <- readLines(url)
#get Json content
json_raw <- fromJSON(raw)
#extract values and convert to dataframe
temp1 <- data.frame(json_raw[1,,])
colnames(temp1) <- c("date", "sig_total")
temp2 <- data.frame(json_raw[2,,])
colnames(temp2) <- c("date", "sig_quorum")
json_df <- merge(temp1, temp2)
return(cbind(json_df, id))
}
#apply function - json graph_full
json_gf_df <- mdply(select(petitions_stats, url = json_gf, id), getjson_gf)
#4.2. For the Last Days Graph ("Gesammelte Unterschriften pro Tag in den letzten zwei Wochen")
#function to extract json graph last days
getjson_gld <- function(url, id){
#read Lines
raw <- readLines(url)
#get Json content
json_raw <- fromJSON(raw)
#transpose and convert to dataframe
json_df <- data.frame(t(json_raw))
colnames(json_df) <- c("new_sig_total", "new_sig_quorum", "date")
return(cbind(json_df, id))
}
#apply function: json graph last days
json_gld_df <- mdply(select(petitions_stats, url = json_gld, id), getjson_gld)
#5. Write csv files
dir.create("data/statistik_und_karten")
write.csv(select(json_gf_df, -url), "data/statistik_und_karten/5_ganzer_zeitraum.csv", row.names = F)
write.csv(select(json_gld_df, -url), "data/statistik_und_karten/5_letzte_2_wochen.csv", row.names = F)
rm(list = ls())
library(foreign)
library(ggplot2)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv", header = T)
ggplot(petitions, aes(x = supporters_total))+
geom_bar()
ggplot(petitions, aes(x = supporters_total))+
geom_bar(color = category)
ggplot(petitions, aes(x = supporters_total))+
geom_bar(fill = category)
View(petitions)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#remove name variable
petitions <- petitions %>%
select(-name)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(from = str_replace(from, "Kategorie: (.+)", "\\1"))
View(petitions)
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
View(petitions)
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1"))
View(petitions)
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1")) %>%
mutate(target_support = str_replace_all(target_support, "\\.", "")) %>%
mutate(target_support = as.integer(target_support))
#perc_reached
#supporters_total
petitions <- petitions %>%
mutate(supporters_total = str_replace_all(supporters_total, "\\.", "")) %>%
mutate(supporters_total = as.integer(supporters_total))
#supporters_for_quorum
petitions <- petitions %>%
mutate(supporters_for_quorum = str_replace_all(supporters_for_quorum, "\\.", "")) %>%
mutate(supporters_for_quorum = as.integer(supporters_for_quorum))
#petition_text
petitions <- petitions %>%
mutate(petition_text = str_replace_all(petition_text, "\\n", "")) %>%
mutate(petition_text = str_replace_all(petition_text, "\\t", ""))
#stat_url -> nothing to do here
petitions$stat_url <- as.character(petitions$stat_url)
#write csv
write.csv(petitions, "data/4_liste_in_zeichnung_clean.csv", row.names = F)
rm(petitions)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv", header = T)
ggplot(petitions, aes(x = supporters_total))+
geom_bar(fill = category)
ggplot(petitions, aes(x = supporters_total, fill = category))+
geom_bar()
summary(petitions$category)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#remove name variable
petitions <- petitions %>%
select(-name)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
gsub("\t|\n", "") %>%
as.factor(.)
#load dataset
petitions <- read.csv("data/3_liste_in_zeichnung_scraped.csv", header = T, colClasses = "character")
#inspect dataset for types etc. / which variables could be numeric, but are still character?
str(petitions)
#Encoding
for(i in 1:ncol(petitions)){
if(is.character(petitions[, i])){
Encoding(petitions[, i]) <- "UTF-8"
}else{
}}
rm(i)
#remove name variable
petitions <- petitions %>%
select(-name)
#cleaning of individual variables
#id
petitions$id <- as.integer(petitions$id)
#url -> nothing to do here
#from
petitions <- petitions %>%
mutate(from = str_replace(from, "Von: (.+)", "\\1"))
#to
#region
#category
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
gsub("\t|\n", "",.) %>%
as.factor(.)
#category
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = gsub("\t|\n", "",.) %>%
as.factor(.)
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = gsub("\t|\n", "",.)) %>%
as.factor(.)
?gsub
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = gsub("\\t|\\n", "",.)) %>%
as.factor(.)
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
as.factor(.)
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", ""))
View(trl)
trl$category
trl <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
trl$category
petitions <- petitions %>%
mutate(category = str_replace(category, "Kategorie:(.+)", "\\1")) %>%
mutate(category = str_replace_all(category, "\n|\t", "")) %>%
mutate(category = str_trim(category))
#status
#target_support
petitions <- petitions %>%
mutate(target_support = str_replace_all(target_support, "\\n", "")) %>%
mutate(target_support = str_replace_all(target_support, "\\t", "")) %>%
mutate(target_support = str_replace_all(target_support, "(\\d{1,}\\.{1,}\\d{1,}).+", "\\1")) %>%
mutate(target_support = str_replace_all(target_support, "\\.", "")) %>%
mutate(target_support = as.integer(target_support))
#perc_reached
#supporters_total
petitions <- petitions %>%
mutate(supporters_total = str_replace_all(supporters_total, "\\.", "")) %>%
mutate(supporters_total = as.integer(supporters_total))
#supporters_for_quorum
petitions <- petitions %>%
mutate(supporters_for_quorum = str_replace_all(supporters_for_quorum, "\\.", "")) %>%
mutate(supporters_for_quorum = as.integer(supporters_for_quorum))
#petition_text
petitions <- petitions %>%
mutate(petition_text = str_replace_all(petition_text, "\\n", "")) %>%
mutate(petition_text = str_replace_all(petition_text, "\\t", ""))
#stat_url -> nothing to do here
petitions$stat_url <- as.character(petitions$stat_url)
write.csv(petitions, "data/4_liste_in_zeichnung_clean.csv", row.names = F)
rm(petitions)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv", header = T)
group_means_df <- petitions %>%
group_by(category) %>%
summarise(total_supporters = mean())
group_means_df <- petitions %>%
group_by(category) %>%
summarise(mean_supporters_total = mean(supporters_total))
View(group_means_df)
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean_supporters_total = mean(supporters_total))
summary(petitions$category)
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean_supporters_total = mean(supporters_total))
library(dplyr)
View(petitions)
group_means_df <- petitions %>%
group_by(as.factor(region)) %>%
summarise(mean_supporters_total = mean(supporters_total))
library(dplyr)
group_means_df <- petitions %>%
group_by(as.factor(region)) %>%
summarise(mean_supporters_total = mean(supporters_total))
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean_supporters_total = mean(supporters_total))
library(dplyr)
detach(plyr)
library(dplyr)
summarise(mean = mean(supporters_for_quorum))
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean = mean(supporters_for_quorum))
library(dplyr)
petitions <- read.csv("data/4_liste_in_zeichnung_clean.csv", header = T)
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean = mean(supporters_for_quorum))
View(group_means_df)
group_means_df <- petitions %>%
group_by(as.factor(category)) %>%
summarise(mean = mean(supporters_for_quorum, na.rm = T))
View(group_means_df)
?hflights
?flights
df_toDt
?df_toDT
??dftoDT
group_means_df <- petitions %>%
tbl_df() %>%
group_by(as.factor(category))
group_means_df
group_means_df <- petitions %>%
tbl_df() %>%
group_by(category)
group_means_df
group_means_df <- petitions %>%
tbl_df() %>%
group_by(category) %>%
summarise(mean_supporters_total = mean(supporters_total, na.rm = T))
summarise
library(dplyr)
detach("package:plyr", unload=TRUE)
library(dplyr)
library(dplyr)
summarize
summarise
group_means_df <- petitions %>%
tbl_df() %>%
group_by(category) %>%
summarise(mean_supporters_total = mean(supporters_total, na.rm = T))
View(group_means_df)
group_means_df <- petitions %>%
tbl_df() %>%
group_by(category) %>%
summarise(mean_supporters_total = mean(supporters_total, na.rm = T)) %>%
filter(!is.na(category))
ggplot(group_means_df, aes(x = mean_supporters_total, fill = category))+
geom_bar()
means.barplot <- qplot(x=group, y=mean, fill=variable,
data=means, geom="bar", stat="identity",
position="dodge")
means.barplot <- qplot(x=category, y=mean_supporters_total, fill=category,
data=group_means_df, geom="bar", stat="identity",
position="dodge")
means.barplot
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge")
View(petitions)
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90))
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust =1))
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggsave("figures/mean_support_by_category.png")
ggplot(group_means_df, aes(x = category, y = mean_supporters_total))+
geom_bar(stat = "identity", position = "dodge") +
scale_x_discrete("")+
scale_y_continuous("mean total support")+
ggtitle("Mean total support by category of petition")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggsave("figures/mean_support_by_category.png")
rm(list = ls())
